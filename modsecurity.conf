# RULE ENGINE INITIALIZATION
# detection only
SecRuleEngine DetectionOnly
# prevent
# SecRuleEngine On
# REQUEST BODY HANDLING
# allow modsecurity to access request bodies
SecRequestBodyAccess On
# enable xml processor in case of xml content-type
SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
# enable JSON Processor in case of JSON content-type 'application/json'
SecRule REQUEST_HEADERS:Content-Type "application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
# maximum request body size we will accept for buffering
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
# store up to 128 kb of request body data in memory
SecRequestBodyInMemoryLimit 131072
# what do do if the request body size is above our configured limit
SecRequestBodyLimitAction Reject
# verify that we've correctly processed the request body
SecRule REQBODY_ERROR "!@eq 0" \
"id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
# default strict settings with what we accept in the multipart/form-data
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
"id:'200003',phase:2,t:none,log,deny,status:400, \
msg:'Multipart request body failed strict validation: \
PE %{REQBODY_PROCESSOR_ERROR}, \
BQ %{MULTIPART_BOUNDARY_QUOTED}, \
BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
DB %{MULTIPART_DATA_BEFORE}, \
DA %{MULTIPART_DATA_AFTER}, \
HF %{MULTIPART_HEADER_FOLDING}, \
LF %{MULTIPART_LF_LINE}, \
SM %{MULTIPART_MISSING_SEMICOLON}, \
IQ %{MULTIPART_INVALID_QUOTING}, \
IP %{MULTIPART_INVALID_PART}, \
IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
# anything that might be a boundary
SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" \
"id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
# pcre tuning avoid a potential regex dos condition
SecPcreMatchLimit 100000
SecPcreMatchLimitRecursion 100000
# pcre tuning msc_pcre_limits_exceeded: pcre match limits were exceeded
SecRule TX:/^MSC_/ "!@streq 0" \
    "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"
# RESPONSE BODY HANDLING
# allow modsecurity to access response bodies (increases response time and latency)
SecResponseBodyAccess On
# which response mime types to inspect
SecResponseBodyMimeType text/plain text/html text/xml
# buffer response bodies of up to 512 kb in length
SecResponseBodyLimit 524288
# what happens when we encounter a response body larger than configured
SecResponseBodyLimitAction ProcessPartial
# FILESYSTEM CONFIGURATION
# the location where modsecurity stores temporary files
SecTmpDir /tmp/
# the location where modsecurity will keep its persistent data
SecDataDir /tmp/
# FILE UPLOADS HANDLING CONFIGURATION
# the location where modsecurity stores intercepted uploaded files
#SecUploadDir /opt/modsecurity/var/upload/
# only keep the files that were determined to be unusual
#SecUploadKeepFiles RelevantOnly
# uploaded are created with restricted permissions
#SecUploadFileMode 0600
# DEBUG LOG CONFIGURATION
# debug log configuration duplicate the error, warning and notice messages from the error log
#SecDebugLog /opt/modsecurity/var/log/debug.log
#SecDebugLogLevel 3
# AUDIT LOG CONFIGURATION
# log the transactions marked by a rule or trigger a server error (e.g., 5xx or 4xx, excluding 404, etc.)
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"
# log everything we know about a transaction.
SecAuditLogParts ABDEFHIJZ
# use a single file for logging
SecAuditLogType Serial
SecAuditLog /var/log/apache2/modsec_audit.log
# path for concurrent audit logging.
#SecAuditLogStorageDir /opt/modsecurity/var/audit/
# MISCELLANEOUS
# commonly used application/x-www-form-urlencoded parameter
SecArgumentSeparator &
# use version 0 (zero) cookies to prevent evasion
SecCookieFormat 0
# specify your unicode code point
SecUnicodeMapFile unicode.mapping 20127
# current ModSecurity version and dependencies versions shared:
# modsecurity, web server, apr, pcre, lua, libxml2, anonymous unique id for host
SecStatusEngine On